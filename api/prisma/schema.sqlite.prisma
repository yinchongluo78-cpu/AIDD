generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile       Profile?
  categories    KbCategory[]
  documents     KbDocument[]
  conversations Conversation[]
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String?
  age       Int?
  grade     String?
  phone     String?
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KbCategory {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents KbDocument[]
}

model KbDocument {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  name       String
  type       String
  url        String
  size       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category KbCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  chunks   KbChunk[]
}

model KbChunk {
  id         String   @id @default(uuid())
  documentId String
  content    String
  embedding  String
  pageNumber Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  document KbDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(uuid())
  userId    String
  title     String   @default("新对话")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  role           String
  content        String
  imageUrl       String?
  citations      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}